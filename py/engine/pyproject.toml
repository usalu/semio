[project]
name = "semio-engine"
version = "4.4.0"
description = "⚙️ Shared fat client for all desktop apps in semio 🏘️"
authors = [{ name = "Ueli Saluz", email = "ueli@semio-tech.com" }]
requires-python = ">=3.13,<3.14"
license = "AGPL-3.0-or-later"
maintainers = [{ name = "Ueli Saluz", email = "ueli@semio-tech.com" }]
dependencies = [
    "fastapi[standard]>=0.115.12,<0.116",
    "graphene>=3.4.3,<4",
    "graphene-pydantic>=0.6.1,<0.7",
    "graphene-sqlalchemy>=3.0.0rc2,<4",
    "jinja2>=3.1.6,<4",
    "lark>=1.2.2,<2",
    "networkx~=3.5",
    "numpy>=2.2.6,<3",
    "openai>=1.83.0,<2",
    "pint>=0.24.4,<0.25",
    "pydantic>=2.11.5,<3",
    "pyside6>=6.9.1,<7",
    "python-dotenv>=1.1.0,<2",
    "pytransform3d>=3.14.1,<4",
    "requests>=2.32.3,<3",
    "sqlalchemy>=2.0.41,<3",
    "sqlmodel>=0.0.24,<0.0.25",
    "starlette>=0.46.2,<0.47",
    "starlette-graphene3>=0.6.0,<0.7",
    "uvicorn[standard]>=0.34.3,<0.35",
    "loguru>=0.7.3,<0.8",
]

[project.urls]
Homepage = "https://github.com/usalu/semio"
Repository = "https://github.com/usalu/semio"

[project.scripts]
run = "engine:run"
dev = "engine:dev"

[dependency-groups]
test = [
    "pytest>=8.4.0,<9",
    "deepdiff>=8.5.0,<9",
    "pytest-cov>=6.1.1,<7",
]
dev = [
    "debugpy>=1.8.14,<2",
    "pre-commit>=4.2.0,<5",
    "black>=25.1.0,<26",
]
build = ["pyinstaller>=6.13.0,<7"]

[tool.uv]
default-groups = [
    "test",
    "dev",
    "build",
]

[tool.hatch.build.targets.sdist]
include = ["engine.py"]

[tool.hatch.build.targets.wheel]
include = ["engine.py"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "def __str__",
    "def client__str__",
    "def list_client__str__",

    "raise AssertionError",
    "raise NotImplementedError",
    "raise InvalidDatabase",
    "raise InvalidBackend",

    "if __name__ == .__main__.:",
    "def main():",
    "if app.debug:",

    "@(abc\\.)?abstractmethod",
]

ignore_errors = true

[tool.tox]
legacy_tox_ini = """
    [tox]
    isolated_build = true

    [testenv]
    skip_install = true
    allowlist_externals = poetry
    commands_pre = poetry install
    commands = tests.sh
"""

[tool.pylint.'MESSAGES CONTROL']
extension-pkg-whitelist = "pydantic"
