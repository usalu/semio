[tool.poetry]
name = "semio-engine"
version = "4.3.0-beta"
description = "The engine that powers semio."
authors = ["Ueli Saluz <ueli@semio-tech.com>"]
maintainers = ["Ueli Saluz <ueli@semio-tech.com>"]
license = "AGPL-3.0-or-later"
repository = "https://github.com/usalu/semio"
homepage = "https://github.com/usalu/semio"
packages = [{ include = "engine.py" }]

[tool.poetry.dependencies]
fastapi = { extras = ["standard"], version = "^0.115.6" }
graphene = "^3.4.3"
graphene-pydantic = "^0.6.1"
graphene-sqlalchemy = { version = "^3.0.0rc2", allow-prereleases = true }
jinja2 = "^3.1.5"
lark = "^1.2.2"
networkx = "^3.4.1"
numpy = "^2.2.1"
openai = "^1.59.7"
pint = "^0.24.4"
pydantic = "^2.10.5"
pyside6 = "^6.8.1.1"
python = ">=3.13,<3.14"
python-dotenv = "^1.0.1"
pytransform3d = "^3.11.0"
requests = "^2.32.3"
sqlalchemy = "^2.0.37"
sqlmodel = "^0.0.22"
starlette = "^0.41.3"
starlette-graphene3 = "^0.6.0"
uvicorn = { extras = ["standard"], version = "^0.32.1" }
loguru = "^0.7.3"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.4"
deepdiff = "^6.7.1"
pytest-cov = "^5.0.0"

[tool.poetry.group.dev.dependencies]
debugpy = "^1.8.13"
pre-commit = "^3.7.1"
black = "^23.11.0"

[tool.poetry.group.build.dependencies]
pyinstaller = "^6.11.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
# engine = "engine:main" #doesn't work. Use instead: poetry run python engine.py
# dev = "python -m debugpy --listen 5678 --wait-for-client engine.py"
run = "engine:run"
dev = "engine:dev"

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "def __str__",
    "def client__str__",
    "def list_client__str__",

    "raise AssertionError",
    "raise NotImplementedError",
    "raise InvalidDatabase",
    "raise InvalidBackend",

    "if __name__ == .__main__.:",
    "def main():",
    "if app.debug:",

    "@(abc\\.)?abstractmethod",
]

ignore_errors = true

[tool.tox]
legacy_tox_ini = """
    [tox]
    isolated_build = true

    [testenv]
    skip_install = true
    allowlist_externals = poetry
    commands_pre = poetry install
    commands = tests.sh
"""

[tool.pylint.'MESSAGES CONTROL']
extension-pkg-whitelist = "pydantic"
