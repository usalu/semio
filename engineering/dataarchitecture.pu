@startuml "data architecture"
skinparam linetype ortho

entity Semio {
    *release : string <<PK>>
    *engine : string
    *created : datetime
}

entity Quality {
    *pk : int <<PK,generated>>
    *name : string
    value : string
    unit : string
    definition : string
    ..
    representationPk : int <<FK>>
    portPk : int <<FK>>
    typePk : int <<FK>>
    piecePk : int <<FK>>
    connectionPk : int <<FK>>
    designPk : int <<FK>>
    kitPk : int <<FK>>
}
note bottom of Quality
    value can be empty (true).
    unit is optional.
    definition is optional.
    Must be linked to one parent entity.
end note

entity Tag {
    *pk : int <<PK,generated>>
    *name : string
    *order : int
    ..
    representationPk : int <<FK>>
}

entity Representation {
    *pk : int <<PK,generated>>
    *url : string
    description : string
    *mime : string
    ..
    typePk : int <<FK>>
}
note right of Representation
    description is optional.
end note

entity Plane {
    *pk : int <<PK,generated>>
    *originX : float
    *originY : float
    *originZ : float
    *xAxisX : float
    *xAxisY : float
    *xAxisZ : float
    *yAxisX : float
    *yAxisY : float
    *yAxisZ : float
}

entity CompatibleFamily {
  *pk : int <<PK,generated>>
  *name : string
  *order : int
  ..
  portPk : int <<FK>>
}

entity Port {
    *pk : int <<PK,generated>>
    *id_ : string
    description : string
    family : string
    *pointX : float
    *pointY : float
    *pointZ : float
    *directionX : float
    *directionY : float
    *directionZ : float
    *t : float
    ..
    typePk : int <<FK>>
}
note right of Port
    id_ is the localId.
    description is optional.
    family is optional.
    t is for diagram ring position.
end note

entity Author {
    *pk : int <<PK,generated>>
    *name : string
    *email : string
    *rank : int
    ..
    typePk : int <<FK>>
    designPk : int <<FK>>
}
note right of Author
    rank is for ordering.
    Must be linked to either a Type or a Design.
end note

entity Type {
    *pk : int <<PK,generated>>
    *name : string
    description : string
    icon : string
    image : string
    variant : string
    *unit : string
    *created : datetime
    *updated : datetime
    ..
    kitPk : int <<FK>>
}
note right of Type
    description, icon, image, variant are optional.
    variant="" means default.
end note

entity Piece {
    *pk : int <<PK,generated>>
    *id_ : string
    description : string
    *typePk : int <<FK>>
    planePk : int <<FK>>
    centerX : float
    centerY : float
    ..
    designPk : int <<FK>>
}
note right of Piece
    id_ is the localId.
    description is optional.
    plane is optional.
    center is optional for diagram.
end note

entity Connection {
    *pk : int <<PK,generated>>
    *connectedPiecePk : int <<FK>>
    *connectedPortPk : int <<FK>>
    *connectingPiecePk : int <<FK>>
    *connectingPortPk : int <<FK>>
    description : string
    gap : float
    shift : float
    raise_ : float
    rotation : float
    turn : float
    tilt : float
    x : float
    y : float
    ..
    designPk : int <<FK>>
}
note right of Connection
    description is optional.
    gap, shift, raise_, rotation, turn, tilt, x, y are optional geometric properties.
end note

entity Design {
    *pk : int <<PK,generated>>
    *name : string
    description : string
    icon : string
    image : string
    variant : string
    view : string
    *unit : string
    *created : datetime
    *updated : datetime
    ..
    kitPk : int <<FK>>
}
note right of Design
    description, icon, image, variant, view are optional.
    variant="" means default.
    view="" means default.
end note

entity Kit {
    *pk : int <<PK,generated>>
    *uri : string <<Unique>>
    *name : string
    description : string
    icon : string
    image : string
    preview : string
    version : string
    remote : string
    homepage : string
    license : string
    *created : datetime
    *updated : datetime
}
note left of Kit
    description, icon, image, preview, version, remote, homepage, license are optional.
end note

' Relationships
Kit ||--o{ Type
Kit ||--o{ Design
Kit ||--o{ Quality

Design ||--o{ Piece
Design ||--o{ Connection
Design ||--o{ Author
Design ||--o{ Quality

Type ||--o{ Representation
Type ||--o{ Port
Type ||--o{ Author
Type ||--o{ Quality

Piece ||--o{ Plane
Piece ||--o{ Quality
'Piece "1" -- "0..1" Plane : contains >

Connection ||--o{ Quality

Representation ||--o{ Tag
Representation ||--o{ Quality

Port ||--o{ CompatibleFamily
Port ||--o{ Quality

' Connection involves two pieces and two ports.
' This is simplified here as direct links for diagram clarity.
Connection -- Piece : "connected"
Connection -- Piece : "connecting"
Connection -- Port : "connected"
Connection -- Port : "connecting"

@enduml