type Query {
  node(
    """
    The ID of the object
    """
    id: ID!
  ): Node
  kit(uri: String!): Kit
}

interface Node {
  """
  The ID of the object
  """
  id: ID!
}

type Kit implements Node {
  uri: String!
  name: String!
  description: String!
  icon: String!
  image: String!
  preview: String!
  version: String!
  remote: String!
  homepage: String!
  license: String!
  created: DateTime!
  updated: DateTime!
  types(before: String, after: String, first: Int, last: Int): TypeNodeConnection
  designs(before: String, after: String, first: Int, last: Int): DesignNodeConnection
  attributes(before: String, after: String, first: Int, last: Int): QualityNodeConnection

  """
  The ID of the object
  """
  id: ID!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type TypeNodeConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [TypeNodeEdge]!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A Relay edge containing a `TypeNode` and its cursor.
"""
type TypeNodeEdge {
  """
  The item at the end of the edge
  """
  node: Type

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type Type implements Node {
  name: String!
  description: String!
  icon: String!
  image: String!
  variant: String!
  stock: Int!
  virtual: Boolean!
  unit: String!
  created: DateTime!
  updated: DateTime!
  representations(before: String, after: String, first: Int, last: Int): RepresentationNodeConnection
  ports(before: String, after: String, first: Int, last: Int): PortNodeConnection
  authors_(before: String, after: String, first: Int, last: Int): AuthorNodeConnection
  attributes(before: String, after: String, first: Int, last: Int): QualityNodeConnection
  kit: Kit
  pieces(before: String, after: String, first: Int, last: Int): PieceNodeConnection

  """
  The ID of the object
  """
  id: ID!
  location: Location!
  authors: [Author!]!
}

type RepresentationNodeConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [RepresentationNodeEdge]!
}

"""
A Relay edge containing a `RepresentationNode` and its cursor.
"""
type RepresentationNodeEdge {
  """
  The item at the end of the edge
  """
  node: Representation

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type Representation implements Node {
  url: String!
  description: String!
  attributes(before: String, after: String, first: Int, last: Int): QualityNodeConnection
  type: Type

  """
  The ID of the object
  """
  id: ID!
  tags: [String!]!
}

type QualityNodeConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [QualityNodeEdge]!
}

"""
A Relay edge containing a `QualityNode` and its cursor.
"""
type QualityNodeEdge {
  """
  The item at the end of the edge
  """
  node: Attribute

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type Attribute implements Node {
  name: String!
  value: String!
  unit: String!
  definition: String!
  representation: Representation
  port: Port
  type: Type
  piece: Piece
  connection: Connection
  design: Design
  kit: Kit

  """
  The ID of the object
  """
  id: ID!
}

type Port implements Node {
  description: String!
  mandatory: Boolean!
  family: String!
  t: Float!
  id_: String
  attributes(before: String, after: String, first: Int, last: Int): QualityNodeConnection
  type: Type

  """
  The ID of the object
  """
  id: ID!
  compatibleFamilies: [String!]!
  point: Point!
  direction: Vector!
  connections: [Connection!]!
}

"""
‚úñÔ∏è A 3d-point (xyz) of floating point numbers.
"""
type Point {
  """
  üéöÔ∏è The x-coordinate of the point.
  """
  x: Float!

  """
  üéöÔ∏è The y-coordinate of the point.
  """
  y: Float!

  """
  üéöÔ∏è The z-coordinate of the point.
  """
  z: Float!
}

"""
‚û°Ô∏è A 3d-vector (xyz) of floating point numbers.
"""
type Vector {
  """
  üéöÔ∏è The x-coordinate of the vector.
  """
  x: Float!

  """
  üéöÔ∏è The y-coordinate of the vector.
  """
  y: Float!

  """
  üéöÔ∏è The z-coordinate of the vector.
  """
  z: Float!
}

type Connection implements Node {
  description: String!
  gap: Float!
  shift: Float!
  rise: Float!
  rotation: Float!
  turn: Float!
  tilt: Float!
  x: Float!
  y: Float!
  attributes(before: String, after: String, first: Int, last: Int): QualityNodeConnection
  design: Design

  """
  The ID of the object
  """
  id: ID!
  connected: Side!
  connecting: Side!
}

type Design implements Node {
  name: String!
  description: String!
  icon: String!
  image: String!
  variant: String!
  view: String!
  unit: String!
  created: DateTime!
  updated: DateTime!
  pieces(before: String, after: String, first: Int, last: Int): PieceNodeConnection
  connections(before: String, after: String, first: Int, last: Int): ConnectionNodeConnection
  authors_(before: String, after: String, first: Int, last: Int): AuthorNodeConnection
  attributes(before: String, after: String, first: Int, last: Int): QualityNodeConnection
  kit: Kit

  """
  The ID of the object
  """
  id: ID!
  location: Location!
  authors: [Author!]!
}

type PieceNodeConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [PieceNodeEdge]!
}

"""
A Relay edge containing a `PieceNode` and its cursor.
"""
type PieceNodeEdge {
  """
  The item at the end of the edge
  """
  node: Piece

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type Piece implements Node {
  description: String!
  id_: String
  type: Type
  plane: Plane
  attributes(before: String, after: String, first: Int, last: Int): QualityNodeConnection
  design: Design

  """
  The ID of the object
  """
  id: ID!
  center: DiagramPoint!
  connections: [Connection!]!
}

type Plane {
  piece: Piece
  origin: Point!
  xAxis: Vector!
  yAxis: Vector!
}

"""
üì∫ A 2d-point (xy) of floats in the diagram. One unit is equal the width of a piece icon.
"""
type DiagramPoint {
  """
  üèÅ The x-coordinate of the icon of the piece in the diagram. One unit is equal the width of a piece icon.
  """
  x: Float!

  """
  üèÅ The y-coordinate of the icon of the piece in the diagram. One unit is equal the width of a piece icon.
  """
  y: Float!
}

type ConnectionNodeConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [ConnectionNodeEdge]!
}

"""
A Relay edge containing a `ConnectionNode` and its cursor.
"""
type ConnectionNodeEdge {
  """
  The item at the end of the edge
  """
  node: Connection

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type AuthorNodeConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [AuthorNodeEdge]!
}

"""
A Relay edge containing a `AuthorNode` and its cursor.
"""
type AuthorNodeEdge {
  """
  The item at the end of the edge
  """
  node: Author

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type Author implements Node {
  name: String!
  email: String!
  rank: Int!
  type: Type
  design: Design

  """
  The ID of the object
  """
  id: ID!
}

"""
üìç A location on the earth surface (longitude, latitude).
"""
type Location {
  """
  ‚ÜîÔ∏è The longitude of the location in degrees.
  """
  longitude: Float!

  """
  ‚ÜïÔ∏è The latitude of the location in degrees.
  """
  latitude: Float!
}

"""
üß± A side of a piece in a connection.
"""
type Side {
  piece: Piece!
  port: Port!
}

type PortNodeConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [PortNodeEdge]!
}

"""
A Relay edge containing a `PortNode` and its cursor.
"""
type PortNodeEdge {
  """
  The item at the end of the edge
  """
  node: Port

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type DesignNodeConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [DesignNodeEdge]!
}

"""
A Relay edge containing a `DesignNode` and its cursor.
"""
type DesignNodeEdge {
  """
  The item at the end of the edge
  """
  node: Design

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type Mutation {
  createKit(kit: KitInputNode!): Kit
}

input KitInputNode {
  """
  üìõ The name of the kit.
  """
  name: String!

  """
  üí¨ The optional human-readable description of the kit.
  """
  description: String = ""

  """
  ü™ô The optional icon [ emoji | logogram | url ] of the kit. The url must point to a quadratic image [ png | jpg | svg ] which will be cropped by a circle. The image must be at least 256x256 pixels and smaller than 1 MB. kit.
  """
  icon: String = ""

  """
  üñºÔ∏è The optional url to the image of the kit. The url must point to a quadratic image [ png | jpg | svg ] which will be cropped by a circle. The image must be at least 720x720 pixels and smaller than 5 MB.
  """
  image: String = ""

  """
  üîÆ The optional url of the preview image of the kit. The url must point to a landscape image [ png | jpg | svg ] which will be cropped by a 2x1 rectangle. The image must be at least 1920x960 pixels and smaller than 15 MB.
  """
  preview: String = ""

  """
  üîÄ The optional version of the kit. No version means the latest version.
  """
  version: String = ""

  """
  ‚òÅÔ∏è The optional Unique Resource Locator (URL) where to fetch the kit remotely.
  """
  remote: String = ""

  """
  üè† The optional url of the homepage of the kit.
  """
  homepage: String = ""

  """
  ‚öñÔ∏è The optional license [ spdx id | url ] of the kit.
  """
  license: String = ""

  """
  üß© The types of the kit.
  """
  types: [TypeInputNode] = null

  """
  üèôÔ∏è The designs of the kit.
  """
  designs: [DesignInputNode] = null

  """
  üìè The attributes of the kit.
  """
  attributes: [QualityInputNode] = null
}

input TypeInputNode {
  """
  üìõ The name of the type.
  """
  name: String!

  """
  üí¨ The optional human-readable description of the type.
  """
  description: String = ""

  """
  ü™ô The optional icon [ emoji | logogram | url ] of the type. The url must point to a quadratic image [ png | jpg | svg ] which will be cropped by a circle. The image must be at least 256x256 pixels and smaller than 1 MB.
  """
  icon: String = ""

  """
  üñºÔ∏è The optional url to the image of the type. The url must point to a quadratic image [ png | jpg | svg ] which will be cropped by a circle. The image must be at least 720x720 pixels and smaller than 5 MB.
  """
  image: String = ""

  """
  üîÄ The optional variant of the type. No variant means the default variant.
  """
  variant: String = ""

  """
  üì¶ The number of items in stock. 2147483647 (=2^31-1) means infinite stock.
  """
  stock: Int = 2147483647

  """
  üëª Whether the type is virtual. A virtual type is not physically present but is used in conjunction with other virtual types to form a larger physical type.
  """
  virtual: Boolean = false

  """
  ‚ìÇÔ∏è The length unit of the point and the direction of the ports of the type.
  """
  unit: String = ""
  location: LocationInputNode = null
  representations: [RepresentationInputNode] = null
  ports: [PortInputNode] = null
  authors: [AuthorInputNode] = null
  attributes: [QualityInputNode] = null
}

input LocationInputNode {
  """
  ‚ÜîÔ∏è The longitude of the location in degrees.
  """
  longitude: Float!

  """
  ‚ÜïÔ∏è The latitude of the location in degrees.
  """
  latitude: Float!
}

input RepresentationInputNode {
  """
  üîó The Unique Resource Locator (URL) to the resource of the representation.
  """
  url: String!

  """
  üí¨ The optional human-readable description of the representation.
  """
  description: String = ""

  """
  üè∑Ô∏è The optional tags to group representations. No tags means default.
  """
  tags: [String] = null

  """
  üìè The attributes of the representation.
  """
  attributes: [QualityInputNode] = null
}

input QualityInputNode {
  """
  üìè The name of the attribute.
  """
  name: String!

  """
  üìè The optional value [ text | url ] of the attribute. No value is equivalent to true for the name.
  """
  value: String = ""

  """
  üìè The optional unit of the value of the attribute.
  """
  unit: String = ""

  """
  üìè The optional definition [ text | uri ] of the attribute.
  """
  definition: String = ""
}

input PortInputNode {
  """
  üÜî The id of the port.
  """
  id_: String = ""

  """
  üí¨ The optional human-readable description of the port.
  """
  description: String = ""

  """
  üíØ Whether the port is mandatory. A mandatory port must be connected in a design.
  """
  mandatory: Boolean = false

  """
  üë®‚Äçüë©‚Äçüëß‚Äçüë¶ The optional family of the port. This allows to define explicit compatibility with other ports.
  """
  family: String = ""

  """
  ‚úÖ The optional other compatible families of the port. An empty list means this port is compatible with all other ports.
  """
  compatibleFamilies: [String] = null

  """
  üíç The parameter t [0,1[ where the port will be shown on the ring of a piece in the diagram. It starts at 12 o`clock and turns clockwise.
  """
  t: Float = 0

  """
  ‚úñÔ∏è The connection point of the port that is attracted to another connection point.
  """
  point: PointInputNode!

  """
  ‚û°Ô∏è The direction of the port. When another piece connects the direction of the other port is flipped and then the pieces are aligned.
  """
  direction: VectorInputNode!

  """
  üìè The attributes of the port.
  """
  attributes: [QualityInputNode] = null
}

input PointInputNode {
  """
  üéöÔ∏è The x-coordinate of the point.
  """
  x: Float!

  """
  üéöÔ∏è The y-coordinate of the point.
  """
  y: Float!

  """
  üéöÔ∏è The z-coordinate of the point.
  """
  z: Float!
}

input VectorInputNode {
  """
  üéöÔ∏è The x-coordinate of the vector.
  """
  x: Float!

  """
  üéöÔ∏è The y-coordinate of the vector.
  """
  y: Float!

  """
  üéöÔ∏è The z-coordinate of the vector.
  """
  z: Float!
}

input AuthorInputNode {
  """
  üìõ The name of the author.
  """
  name: String!

  """
  üìß The email of the author.
  """
  email: String!
}

input DesignInputNode {
  """
  üìõ The name of the design.
  """
  name: String!

  """
  üí¨ The optional human-readable description of the design.
  """
  description: String = ""

  """
  ü™ô The optional icon [ emoji | logogram | url ] of the design. The url must point to a quadratic image [ png | jpg | svg ] which will be cropped by a circle. The image must be at least 256x256 pixels and smaller than 1 MB. The image must be at least 256x256 pixels and smaller than 1 MB.
  """
  icon: String = ""

  """
  üñºÔ∏è The optional url to the image of the design. The url must point to a quadratic image [ png | jpg | svg ] which will be cropped by a circle. The image must be at least 720x720 pixels and smaller than 5 MB.
  """
  image: String = ""

  """
  üîÄ The optional variant of the design. No variant means the default variant.
  """
  variant: String = ""

  """
  ü•Ω The optional view of the design. No view means the default view.
  """
  view: String = ""

  """
  üìè The unit of the design.
  """
  unit: String = ""
  location: LocationInputNode = null
  pieces: [PieceInputNode] = null
  connections: [ConnectionInputNode] = null
  authors: [AuthorInputNode] = null
  attributes: [QualityInputNode] = null
}

input PieceInputNode {
  """
  üÜî The id of the piece.
  """
  id_: String = ""

  """
  üí¨ The optional human-readable description of the piece.
  """
  description: String = ""

  """
  ‚ó≥ The optional plane of the piece. When pieces are connected only one piece can have a plane.
  """
  plane: PlaneInputNode = null

  """
  üì∫ The optional center of the piece in the diagram. When pieces are connected only one piece can have a center.
  """
  center: DiagramPointInputNode = null

  """
  üìè The attributes of the piece.
  """
  attributes: [QualityInputNode] = null
  type: TypeIdInputNode!
}

input PlaneInputNode {
  """
  ‚å± The origin of the plane.
  """
  origin: PointInputNode!

  """
  ‚û°Ô∏è The x-axis of the plane.
  """
  xAxis: VectorInputNode!

  """
  ‚û°Ô∏è The y-axis of the plane.
  """
  yAxis: VectorInputNode!
}

input DiagramPointInputNode {
  """
  üèÅ The x-coordinate of the icon of the piece in the diagram. One unit is equal the width of a piece icon.
  """
  x: Float!

  """
  üèÅ The y-coordinate of the icon of the piece in the diagram. One unit is equal the width of a piece icon.
  """
  y: Float!
}

input TypeIdInputNode {
  """
  üìõ The name of the type.
  """
  name: String!

  """
  üîÄ The optional variant of the type. No variant means the default variant.
  """
  variant: String = ""
}

input ConnectionInputNode {
  """
  üí¨ The optional human-readable description of the connection.
  """
  description: String = ""

  """
  ‚ÜïÔ∏è The optional longitudinal gap (applied after rotation and tilt in port direction) between the connected and the connecting piece.
  """
  gap: Float = 0

  """
  ‚ÜîÔ∏è The optional lateral shift (applied after the rotation, the turn and the tilt in the plane) between the connected and the connecting piece..
  """
  shift: Float = 0

  """
  ü™ú The optional vertical rise in port direction between the connected and the connecting piece. Set this only when necessary as it is not a symmetric property which means that when the parent piece and child piece are flipped it yields a different result.
  """
  rise: Float = 0

  """
  üîÑ The optional horizontal rotation in port direction between the connected and the connecting piece in degrees.
  """
  rotation: Float = 0

  """
  üõû The optional turn perpendicular to the port direction (applied after rotation and the turn) between the connected and the connecting piece in degrees.  Set this only when necessary as it is not a symmetric property which means that when the parent piece and child piece are flipped it yields a different result.
  """
  turn: Float = 0

  """
  ‚ÜóÔ∏è The optional horizontal tilt perpendicular to the port direction (applied after rotation and the turn) between the connected and the connecting piece in degrees.
  """
  tilt: Float = 0

  """
  ‚û°Ô∏è The optional offset in x direction between the icons of the child and the parent piece in the diagram. One unit is equal the width of a piece icon.
  """
  x: Float = 0

  """
  ‚¨ÜÔ∏è The optional offset in y direction between the icons of the child and the parent piece in the diagram. One unit is equal the width of a piece icon.
  """
  y: Float = 0

  """
  üß≤ The connected side of the connection.
  """
  connected: SideInputNode!

  """
  üß≤ The connecting side of the connection.
  """
  connecting: SideInputNode!
}

input SideInputNode {
  piece: PieceIdInputNode!
  port: PortIdInputNode!
}

input PieceIdInputNode {
  """
  üÜî The id of the piece.
  """
  id_: String = ""
}

input PortIdInputNode {
  """
  üÜî The id of the port.
  """
  id_: String = ""
}
